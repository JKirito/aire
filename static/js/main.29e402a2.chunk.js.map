{"version":3,"sources":["redux/ChangeHandlers/homeActions.js","redux/ChangeHandlers/homeConstants.js","components/Home/Home.js","redux/Polling/pollingActions.js","redux/Polling/pollingConstants.js","components/Footer/Footer.js","components/NavBar/NavBar.js","components/Package/HomePage.js","components/LivePolls/Poll.js","components/NavBar/LiveNavBar.js","components/LivePolls/LivePoll.js","components/NavBar/PollingNavBar.js","components/Charts/Chart.js","components/LivePolls/PollContent.js","components/Pollling/Polling.js","components/Ques/Ques.js","App.js","serviceWorker.js","redux/Polling/pollingReducer.js","redux/ChangeHandlers/homeReducer.js","redux/store.js","index.js"],"names":["changeHostname","hostname","type","payload","connect","state","livePolls","poll","livepolls","home","dispatch","addPoll","id","evt","target","value","props","className","style","color","fontWeight","fontStyle","fontSize","padding","marginLeft","placeholder","onChange","backgroundColor","onClick","Footer","NavBar","to","aria-hidden","HomePage","Poll","address","disabled","LiveNavBar","map","key","PollingNavBar","Chart","data","labels","datasets","label","width","height","options","maintainAspectRatio","PollContent","check","i","length","match","params","Ques","App","path","exact","component","LivePoll","Polling","Boolean","window","location","initialState","pollingReducer","action","push","homeReducer","rootReducer","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.29e402a2.chunk.js","sourcesContent":["import { EDIT_HOSTNAME } from \"./homeConstants\";\r\n\r\nexport const changeHostname = hostname => {\r\n  return {\r\n    type: EDIT_HOSTNAME,\r\n    payload: hostname\r\n  };\r\n};\r\n","export const EDIT_HOSTNAME = \"EDIT_HOSTNAME\";\r\nexport const SEND_DATA = \"SEND_DATA\";\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addPoll } from \"../../redux/Polling/pollingActions\";\r\nimport { changeHostname } from \"../../redux/ChangeHandlers/homeActions\";\r\n\r\nfunction Home(props) {\r\n  return (\r\n    <div>\r\n      <div className='span-content'>\r\n        <span style={{ color: \"#f64c7b\" }}>a</span>\r\n        <span style={{ color: \"#c77f9f\" }}>i</span>\r\n        <span style={{ color: \"#a0a1bd\" }}>r</span>\r\n        <span style={{ color: \"#6dcde0\" }}>e</span>\r\n        {/* <span>&nbsp;</span> */}\r\n        <span style={{ color: \"#FF6978\" }}>2</span>\r\n        <span style={{ color: \"#27474E\" }}>.</span>\r\n        <span style={{ color: \"#7D387D\" }}>O</span>\r\n      </div>\r\n      <div>\r\n        <fieldset className='survey-form'>\r\n          <legend>\r\n            <p\r\n              style={{\r\n                color: \"#6c757d\",\r\n                fontWeight: \"400\",\r\n                fontStyle: \"italic\",\r\n                fontSize: \"0.7rem\",\r\n                padding: \"0 0rem\",\r\n                marginLeft: \"0.3rem\"\r\n              }}\r\n            >\r\n              Survey Name\r\n            </p>\r\n          </legend>\r\n          <input\r\n            type='text'\r\n            placeholder='Survey Name'\r\n            id='survey-name'\r\n            onChange={props.changeHostname}\r\n            value={props.hostname}\r\n          />\r\n        </fieldset>\r\n        <div className='center'>\r\n          <input\r\n            type='button'\r\n            style={{\r\n              backgroundColor: \"#3f51b5\",\r\n              color: \"#fff\",\r\n              padding: \"0.8rem 1rem\"\r\n            }}\r\n            value=\"Let's Get Started\"\r\n            className='btn'\r\n            onClick={() => {\r\n              props.addPoll(props.hostname);\r\n              props.changeHostname(null, \" \");\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    livePolls: state.poll.livepolls,\r\n    hostname: state.home.hostname\r\n  };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    addPoll: hostname => {\r\n      // console.log(evt.target);\r\n      if (hostname && hostname !== \" \") {\r\n        dispatch(addPoll({ id: 1234, hostname: hostname }));\r\n      }\r\n    },\r\n    changeHostname: (evt, hostname) => {\r\n      if (hostname) {\r\n        dispatch(changeHostname(hostname));\r\n      } else {\r\n        dispatch(changeHostname(evt.target.value));\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n","import { ADD_POLLS } from \"./pollingConstants\";\r\n\r\nexport const addPoll = hostname => {\r\n  return {\r\n    type: ADD_POLLS,\r\n    payload: hostname\r\n  };\r\n};\r\n","export const ADD_POLLS = \"ADD_POLLS\";\r\n","import React from \"react\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className='footer'>\r\n      <p>&#9400; 2020 Copyright: JKirito</p>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction NavBar() {\r\n  return (\r\n    <nav className='navBar App'>\r\n      <div className='navBar-content'>\r\n        <div>\r\n          <Link to='/livepolls'>\r\n            <button id='pollinglistbtn' className='btn'>\r\n              <i className='fa fa-clipboard' aria-hidden='true'></i>\r\n            </button>\r\n          </Link>\r\n        </div>\r\n        <div className='ml-auto'>\r\n          <button id='informationbtn' className='btn'>\r\n            <i className='fa fa-info-circle' aria-hidden='true'></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport Home from \"../Home/Home\";\r\nimport Footer from \"../Footer/Footer\";\r\nimport NavBar from \"../NavBar/NavBar\";\r\n\r\nfunction HomePage() {\r\n  return (\r\n    <div>\r\n      <NavBar />\r\n      <Home />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Poll(props) {\r\n  const hostname = props.hostname;\r\n  const address = `/livepolls/${hostname}`;\r\n  return (\r\n    <div className='poll'>\r\n      <input type='button' value={props.hostname} disabled />\r\n      <span className='enterbtn'>\r\n        <Link to={address}>\r\n          <input type='button' value='Enter' />\r\n        </Link>\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Poll;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction LiveNavBar() {\r\n  return (\r\n    <nav className='navBar App'>\r\n      <div className='navBar-content'>\r\n        <div>\r\n          <Link to='/'>\r\n            <button id='pollinglistbtn' className='btn'>\r\n              <i className='fa fa-home' aria-hidden='true'></i>\r\n            </button>\r\n          </Link>\r\n          <span className='live-navbar-logo'>Aire</span>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default LiveNavBar;\r\n","import React from \"react\";\r\nimport Poll from \"./Poll\";\r\nimport { connect } from \"react-redux\";\r\nimport LiveNavBar from \"../NavBar/LiveNavBar\";\r\n\r\nfunction LivePoll(props) {\r\n  // console.log(props);\r\n  return (\r\n    <div>\r\n      <LiveNavBar />\r\n      <div id='live-poll-heading'>\r\n        <span>Live Polls</span>\r\n      </div>\r\n      <div className='poll-container'>\r\n        {props.livepolls.map(poll => {\r\n          return <Poll key={poll.id} hostname={poll.hostname} id={poll.id} />;\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    livepolls: state.poll.livepolls\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(LivePoll);\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction PollingNavBar() {\r\n  return (\r\n    <nav className='navBar App'>\r\n      <div className='navBar-content'>\r\n        <div>\r\n          <Link to='/livepolls'>\r\n            <button id='pollinglistbtn' className='btn'>\r\n              <i className='fa fa-arrow-left' aria-hidden='true'></i>\r\n            </button>\r\n          </Link>\r\n          <span className='live-navbar-logo'>Back</span>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default PollingNavBar;\r\n","import React from \"react\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\n\r\nfunction Chart() {\r\n  const data = {\r\n    labels: [\"Yes\", \"No\"],\r\n    datasets: [\r\n      {\r\n        data: [1, 1, 1],\r\n        label: [\"Y\", \"N\"],\r\n        backgroundColor: [\"grey\", \"red\", \"grey\"]\r\n      }\r\n    ]\r\n  };\r\n\r\n  return (\r\n    <div className='res-chart-container'>\r\n      <div className='align-center'>\r\n        <Doughnut\r\n          data={data}\r\n          width={400}\r\n          height={400}\r\n          options={{ maintainAspectRatio: false }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Chart;\r\n","import React from \"react\";\r\nimport Chart from \"../Charts/Chart\";\r\n\r\nfunction PollContent(props) {\r\n  return (\r\n    <div>\r\n      <h1>Poll Content {props.hostname}</h1>\r\n      <div className='chart-container'>\r\n        <Chart />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PollContent;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PollingNavBar from \"../NavBar/PollingNavBar\";\r\nimport PollContent from \"../LivePolls/PollContent\";\r\n\r\nfunction Polling(props) {\r\n  var check = false;\r\n  for (let i = 0; i < props.livepolls.length; i++) {\r\n    if (props.livepolls[i].hostname === props.match.params.hostname) {\r\n      check = true;\r\n      break;\r\n    }\r\n  }\r\n  return (\r\n    <div>\r\n      <PollingNavBar />\r\n      {check && (\r\n        <PollContent\r\n          livepolls={props.livepolls}\r\n          hostname={props.match.params.hostname}\r\n        />\r\n      )}\r\n      {!check && <h1>404</h1>}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    livepolls: state.poll.livepolls\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Polling);\r\n","import React from \"react\";\r\nimport LiveNavBar from \"../NavBar/LiveNavBar\";\r\nfunction Ques(props) {\r\n  return (\r\n    <div>\r\n      <LiveNavBar />\r\n      <h1>Welcome to the Setup page</h1>\r\n      <div>\r\n        <fieldset className='survey-form'>\r\n          <legend>\r\n            <p\r\n              style={{\r\n                color: \"#6c757d\",\r\n                fontWeight: \"400\",\r\n                fontStyle: \"italic\",\r\n                fontSize: \"0.7rem\",\r\n                padding: \"0 0rem\",\r\n                marginLeft: \"0.3rem\"\r\n              }}\r\n            >\r\n              Survey Name\r\n            </p>\r\n          </legend>\r\n          <input\r\n            type='text'\r\n            placeholder='Survey Name'\r\n            id='survey-name'\r\n            // onChange={props.changeHostname}\r\n            // value={props.hostname}\r\n          />\r\n        </fieldset>\r\n        <div className='center'>\r\n          <input\r\n            type='button'\r\n            style={{\r\n              backgroundColor: \"#3f51b5\",\r\n              color: \"#fff\",\r\n              padding: \"0.8rem 1rem\"\r\n            }}\r\n            value=\"Let's Get Started\"\r\n            className='btn'\r\n            onClick={() => {}}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Ques;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport HomePage from \"./components/Package/HomePage\";\nimport LivePoll from \"./components/LivePolls/LivePoll\";\nimport Polling from \"./components/Pollling/Polling\";\nimport Ques from \"./components/Ques/Ques\";\n\nfunction App() {\n  return (\n    <div className='container'>\n      <Router>\n        <Switch>\n          <Route path='/' exact component={HomePage} />\n          <Route path='/livepolls' exact component={LivePoll} />\n          <Route path='/livepolls/:hostname' exact component={Polling} />\n          <Route path='/livepolls/:hostname/ques' component={Ques} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ADD_POLLS } from \"./pollingConstants\";\r\n\r\nconst initialState = {\r\n  livepolls: [\r\n    {\r\n      id: \"123\",\r\n      hostname: \"Arpit\",\r\n      data: [1, 0, 0, 1, 1, 1, 0]\r\n    },\r\n    {\r\n      id: \"321\",\r\n      hostname: \"Lucifer\",\r\n      data: [1, 1, 1, 0, 1, 0, 0]\r\n    }\r\n  ]\r\n};\r\n\r\nconst pollingReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_POLLS: {\r\n      state.livepolls.push(action.payload);\r\n      return state;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default pollingReducer;\r\n","import { EDIT_HOSTNAME } from \"./homeConstants\";\r\n\r\nconst initialState = {\r\n  hostname: \"\"\r\n};\r\nconst homeReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case EDIT_HOSTNAME:\r\n      return {\r\n        ...state,\r\n        hostname: action.payload\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default homeReducer;\r\n","import { createStore } from \"redux\";\r\nimport pollingReducer from \"./Polling/pollingReducer\";\r\nimport { combineReducers } from \"redux\";\r\nimport homeReducer from \"./ChangeHandlers/homeReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  poll: pollingReducer,\r\n  home: homeReducer\r\n});\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}